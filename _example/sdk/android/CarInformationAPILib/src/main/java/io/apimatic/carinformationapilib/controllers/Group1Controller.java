/*
 * CarInformationAPILib
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 11/01/2014
 */
package io.apimatic.carinformationapilib.controllers;

import java.io.*;
import java.util.*;
import java.util.concurrent.*;
import com.fasterxml.jackson.core.type.TypeReference;
import com.mashape.unirest.request.*;
import com.mashape.unirest.http.HttpResponse;
import com.mashape.unirest.http.Unirest;
import io.apimatic.carinformationapilib.*;
import io.apimatic.carinformationapilib.models.*;

public class Group1Controller {
    /**
     * TODO: type endpoint description here
     * @param    regNo    Required parameter: TODO: type description here
     * @param    color    Optional parameter: TODO: type description here
     * @param    cartType    Optional parameter: TODO: type description here
     * @param    queryParameters    Additional optional query parameters are supported by this endpoint
	 * @return	Returns the CarInfoModel response from the API call*/
    public Future<CarInfoModel> GetCarInfoAsync (
            final String regNo,
            final String color,
            final CarTypesEnum cartType,
            Map<String, Object> queryParameters
            ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/carinfo");

        //process optional query parameters
        APIHelper.appendUrlWithQueryParameters(queryBuilder, new HashMap<String, Object>() {
            private static final long serialVersionUID = 5195512040317643470L;
            {
                    put( "RegNo", regNo );
                    put( "Color", color );
                    put( "CartType", (null != cartType) ? cartType.value() : null );
            }});

        //append optional parameters to the query
        APIHelper.appendUrlWithQueryParameters(queryBuilder, queryParameters);

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequest request = Unirest.get(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
               .header("Accept", "application/json");

        //invoke request and get response
        final Future<HttpResponse<String>> responseAsync = request.asStringAsync();
        return new FutureTask<CarInfoModel>(new Callable<CarInfoModel>() {
            public CarInfoModel call() throws IOException, APIException, ExecutionException, InterruptedException {
                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return APIHelper.jsonDeserialize(response.getBody(),
                 new TypeReference<CarInfoModel>(){});
        }});
    }
        
    /**
     * TODO: type endpoint description here
     * @param    newOwner    Required parameter: The new owner of this car
     * @param    odometer    Required parameter: Current kilometers reading from odometer
     * @param    fieldParameters    Additional optional form parameters are supported by this endpoint
	 * @return	Returns the boolean response from the API call*/
    public Future<boolean> postUpdateCarInfoAsync (
            final String newOwner,
            final int odometer,
            Map<String, Object> fieldParameters
            ) {
        //the base uri for api requests
        String baseUri = Configuration.baseUri;

        //prepare query string for API call
        StringBuilder queryBuilder = new StringBuilder(baseUri);
        queryBuilder.append("/carinfo");

        //validate and preprocess url
        String queryUrl = APIHelper.cleanUrl(queryBuilder);

        //prepare and invoke the API call request to fetch the response
        HttpRequestWithBody request = Unirest.post(queryUrl);

        //append request with appropriate headers and parameters
        request.header("User-Agent", "APIMATIC 2.0")
                .field("NewOwner", newOwner)
                .field("Odometer", odometer);

        //optional form parameters
        request.fields(fieldParameters);

        //invoke request and get response
        final Future<HttpResponse<String>> responseAsync = request.asStringAsync();
        return new FutureTask<boolean>(new Callable<boolean>() {
            public boolean call() throws IOException, APIException, ExecutionException, InterruptedException {
                //execute and get response from async task
                HttpResponse<String> response = responseAsync.get();

                //Error handling using HTTP status codes
                int responseCode = response.getCode();
                if ((responseCode < 200) || (responseCode > 206)) //[200,206] = HTTP OK
                    throw new APIException("HTTP Response Not OK", responseCode);

                return Boolean.parseBoolean(response.getBody());
        }});
    }
        
}