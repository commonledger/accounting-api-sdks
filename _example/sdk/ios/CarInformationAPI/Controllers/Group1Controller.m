//
//  Group1Controller.m
//  CarInformationAPI
//
//  This file was automatically generated by APIMATIC BETA v2.0 on 11/01/2014
//
#import "Group1Controller.h"

@implementation Group1Controller
/**
* TODO: type endpoint description here
* @param    regNo    Required parameter: TODO: type description here
* @param    color    Optional parameter: TODO: type description here
* @param    cartType    Optional parameter: TODO: type description here
* @param    queryParameters    Additional optional query parameters are supported by this endpoint
* @return	Returns the CarInfoModel* response from the API call */
- (void) GetCarInfoAsyncWithRegNo:(NSString*) regNo
                color:(NSString*) color
                cartType:(enum CarTypesEnum) cartType
                queryParameters:(NSDictionary*) queryParameters
                completionBlock:(CompletedGetCarInfo) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/carinfo"];

    //process optional query parameters
    [APIHelper appendUrl: queryBuilder withQueryParameters: @{
                    @"RegNo": regNo,
                    @"Color": color,
                    @"CartType": [CarTypesEnumHelper stringFromCarTypesEnum: (enum CarTypesEnum) cartType withDefault: [NSNull null]]
                }];

    //append optional parameters to the query
    [APIHelper appendUrl: queryBuilder withQueryParameters: queryParameters];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"User-Agent": @"APIMATIC 2.0",
        @"Accept": @"application/json"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    UNIHTTPRequest* request = [UNIRest get: ^(UNISimpleRequest* request) 
    { 
        [request setUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers

    }];

    //invoke request and get response
    [request asStringAsync:
        ^(UNIHTTPStringResponse *response, NSError *error) {
            if (nil == error) {

                //Error handling using HTTP status codes
                if((response.code < 200) || (response.code > 206)) //[200,206] = HTTP OK
                    @throw [[APIException alloc] initWithName: @"APIException"
                                                    andReason: @"HTTP Response Not OK"
                                                      andCode: response.code];
                //prase/deserialize respose and return to API caller
                CarInfoModel* result = (CarInfoModel*) [APIHelper jsonDeserialize: response.body
                toClass: CarInfoModel.class];

                //announce completion with success
                onCompleted(YES, result, nil);
            }
            else {
                onCompleted(NO, nil, error);
            }
    }];

}

/**
* TODO: type endpoint description here
* @param    newOwner    Required parameter: The new owner of this car
* @param    odometer    Required parameter: Current kilometers reading from odometer
* @param    fieldParameters    Additional optional form parameters are supported by this endpoint
* @return	Returns the BOOL response from the API call */
- (void) postUpdateCarInfoAsyncWithNewOwner:(NSString*) newOwner
                odometer:(int) odometer
                fieldParameters:(NSDictionary*) fieldParameters
                completionBlock:(CompletedPostUpdateCarInfo) onCompleted
{
    //the base uri for api requests
    NSString* baseUri = [NSString stringWithString: (NSString*) Configuration_BaseUri];

    //prepare query string for API call
    NSMutableString* queryBuilder = [NSMutableString stringWithString: baseUri]; 
    [queryBuilder appendString: @"/carinfo"];

    //validate and preprocess url
    NSString* queryUrl = [APIHelper cleanUrl: queryBuilder];

    //preparing request parameters
    NSMutableDictionary* parameters = [[NSMutableDictionary alloc] init];
    [parameters addEntriesFromDictionary: @{
        @"NewOwner": newOwner,
        @"Odometer": [NSNumber numberWithInteger:odometer]
    }];

    //optional form parameters
    [parameters addEntriesFromDictionary: fieldParameters];

    //Remove null values from parameter collection in order to omit from request
    [APIHelper removeNullValues: parameters];


    //preparing request headers
    NSMutableDictionary* headers = [[NSMutableDictionary alloc] initWithDictionary: @{
        @"User-Agent": @"APIMATIC 2.0"
    }];

    //Remove null values from header collection in order to omit from request
    [APIHelper removeNullValues: headers];


    //prepare the request and fetch response  
    UNIHTTPRequest* request = [UNIRest post: ^(UNISimpleRequest* request) 
    { 
        [request setUrl: queryUrl]; //set request url        
        [request setHeaders: headers]; //set request headers
        [request setParameters: parameters]; //set request parameters

    }];

    //invoke request and get response
    [request asStringAsync:
        ^(UNIHTTPStringResponse *response, NSError *error) {
            if (nil == error) {

                //Error handling using HTTP status codes
                if((response.code < 200) || (response.code > 206)) //[200,206] = HTTP OK
                    @throw [[APIException alloc] initWithName: @"APIException"
                                                    andReason: @"HTTP Response Not OK"
                                                      andCode: response.code];
                //prase/deserialize respose and return to API caller
                BOOL result = [response.body boolValue];

                //announce completion with success
                onCompleted(YES, result, nil);
            }
            else {
                onCompleted(NO, nil, error);
            }
    }];

}


@end