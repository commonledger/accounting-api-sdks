/*
 * CarInformationAPI.PCL
 *
 * This file was automatically generated by APIMATIC BETA v2.0 on 11/01/2014
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using unirest_net.http;
using unirest_net.request;
using CarInformationAPI.PCL;
using CarInformationAPI.PCL.Models;

namespace CarInformationAPI.PCL.Controllers
{
    public class Group1Controller
    {
        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="regNo">Required parameter: TODO: type parameter description here</param>
        /// <param name="color">Optional parameter: TODO: type parameter description here</param>
        /// <param name="cartType">Optional parameter: TODO: type parameter description here</param>
        /// <param name="queryParameters">Additional optional query parameters are supported by this endpoint</param>
        /// <return>Returns the CarInfoModel response from the API call</return>
        public async Task<CarInfoModel> GetCarInfoAsync(
                string regNo,
                string color = null,
                CarTypesEnum? cartType = null,
                Dictionary<string, object> queryParameters = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/carinfo");


            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, new Dictionary<string, object>()
                {
                    { "RegNo", regNo },
                    { "Color", color },
                    { "CartType", (null != cartType) ? (int?) cartType : null }
                });

            //append optional parameters to the query
            APIHelper.AppendUrlWithQueryParameters(queryBuilder, queryParameters);

            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.get(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .header("Accept", "application/json");

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return APIHelper.JsonDeserialize<CarInfoModel>(response.Body);
        }

        /// <summary>
        /// TODO: type endpoint description here
        /// </summary>
        /// <param name="newOwner">Required parameter: The new owner of this car</param>
        /// <param name="odometer">Required parameter: Current kilometers reading from odometer</param>
        /// <param name="fieldParameters">Additional optional form parameters are supported by this endpoint</param>
        /// <return>Returns the bool response from the API call</return>
        public async Task<bool> PostUpdateCarInfoAsync(
                string newOwner,
                int odometer,
                Dictionary<string, object> fieldParameters = null)
        {
            //the base uri for api requests
            string baseUri = Configuration.BaseUri;

            //prepare query string for API call
            StringBuilder queryBuilder = new StringBuilder(baseUri);
            queryBuilder.Append("/carinfo");


            //validate and preprocess url
            string queryUrl = APIHelper.CleanUrl(queryBuilder);

            //prepare and invoke the API call request to fetch the response
            HttpRequest request = Unirest.post(queryUrl)
                //append request with appropriate headers and parameters
                .header("User-Agent", "APIMATIC 2.0")
                .field("NewOwner", newOwner)
                .field("Odometer", odometer);

            //optional form parameters
            request.fields(fieldParameters);

            //invoke request and get response
            HttpResponse<String> response = await request.asStringAsync();

            //Error handling using HTTP status codes
            if ((response.Code < 200) || (response.Code > 206)) //[200,206] = HTTP OK
                throw new APIException(@"HTTP Response Not OK", response.Code);

            return Boolean.Parse(response.Body);
        }

    }
} 