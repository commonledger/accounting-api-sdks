/**
  *CarInformationAPILib
  *
  * This file was automatically generated by APIMATIC BETA v2.0 on 11/01/2014
  */

'use strict';
CarInformationAPILib.factory('Group1Controller',function($http,$q,Configuration,APIHelper){
    return{
    
       /**
        * TODO: type endpoint description here
        * @param    regNo    Required parameter: TODO: type description here
        * @param    color    Optional parameter: TODO: type description here
        * @param    cartType    Optional parameter: TODO: type description here
        * @param    queryParameters    Additional optional query parameters are supported by this endpoint

        * @return: CarInfoModel (promise)
        */
        GetCarInfo:function(
                regNo,
                color,
                cartType,
                $queryParameters){

    
            //prepare query string for API call
            var queryBuilder = Configuration.BASEURI + "/carinfo"
    
            //process optional query parameters
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder,{
                "RegNo": regNo ,
                "Color": color ,
                "CartType":  (cartType != null)?cartType:null ,
            });
    
            //append optional parameters to the query
            queryBuilder = APIHelper.appendUrlWithQueryParameters(queryBuilder, queryParameters)
    
            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder)

            //prepare headers
            var headers = {
                "User-Agent" : "APIMATIC 2.0",
                "Accept" : "application/json",
            };
                
            
            //prepare and invoke the API call request to fetch the response 
            var config= {
                method:"GET",
                url:queryUrl,
                headers:headers,
                
            };
            var response = $http(config);
        
            //Create promise to return
            var deffered= $q.defer();
        
            //process response
            response.success(function(data, status, headers, config){
            
                deffered.resolve(data);

            }).error(function(msg,code){

                deffered.reject({ErrorMessage:"HTTP Response Not OK",ErrorCode: code});

            });
            return deffered.promise;

        },//End of endpoint

    
       /**
        * TODO: type endpoint description here
        * @param    newOwner    Required parameter: The new owner of this car
        * @param    odometer    Required parameter: Current kilometers reading from odometer
        * @param    fieldParameters    Additional optional form parameters are supported by this endpoint

        * @return: bool (promise)
        */
        postUpdateCarInfo:function(
                newOwner,
                odometer,
                $fieldParameters){

    
            //prepare query string for API call
            var queryBuilder = Configuration.BASEURI + "/carinfo"
    
            //validate and preprocess url
            var queryUrl = APIHelper.cleanUrl(queryBuilder)

            //prepare headers
            var headers = {
                "User-Agent" : "APIMATIC 2.0",
            };
                
                       //prepare form parameters
            var parameters = {
            "NewOwner": newOwner,
            "Odometer": odometer,
            };
           //Modify content type headers
           headers["Content-Type"]=undefined;
           var formData = new FormData();
           
        formData.append("NewOwner", newOwner);
        formData.append("Odometer", odometer);
    
            //prepare and invoke the API call request to fetch the response 
            var config= {
                method:"POST",
                url:queryUrl,
                headers:headers,
                data: formData, transformRequest: function(data) { return data; }
            };
            var response = $http(config);
        
            //Create promise to return
            var deffered= $q.defer();
        
            //process response
            response.success(function(data, status, headers, config){
            
                deffered.resolve(data);

            }).error(function(msg,code){

                deffered.reject({ErrorMessage:"HTTP Response Not OK",ErrorCode: code});

            });
            return deffered.promise;

        },//End of endpoint

    
    }

});